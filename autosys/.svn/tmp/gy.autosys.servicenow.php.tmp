#!/usr/bin/php
<?php
require_once('../common/lib/goodyear/Tail.php');
require_once('../common/lib/goodyear/locking_functions.php');
require_once('../common/lib/goodyear/databases.php');
require_once('../common/lib/goodyear/goodyear_functions.php');
require_once('../common/lib/goodyear/servicenow_functions.php');
require_once('../common/lib/goodyear/application_environment.php');
$status_directory=str_replace('autosys','status',__DIR__);
$status_file=$status_directory.DIRECTORY_SEPARATOR.basename(__FILE__,'.php').'.position';

// Make sure we NEVER EVER run another copy of ourselves before we do anything with DB records or Web Services!
$lock_handle=open_script_file_lock(array('directory'=>$status_directory));

$debug=TRUE;
$debug_detail=FALSE;
$debug_loglines=TRUE;
date_default_timezone_set('America/New_York');
$sleeptime = 1000000;
$hostname=gethostname();
if ($hostname===FALSE) {
  println("Unable to find hostname");
  exit(1);
}
$script_start_time=microtime(TRUE);

if ($debug) print_log('Script start: '.basename(__FILE__));

$application_environment=get_application_environment();
switch ($application_environment) {

  case 'development':
    $dir='/opt/CA/WorkloadAutomationAE/autouser.DEV/out/';
    $file='event_demon.DEV';
    $db_autosys_str='ats11d';
    $wsdl_im='https://goodyeardev.service-now.com/GyCaAutosys.do?WSDL';
    $login='LDSNASD';
    $password='WhatIsJobScheduling4OnDev';
  break;
  case 'test':
    $dir='/opt/CA/WorkloadAutomationAE/autouser.TTS/out/';
    $file='event_demon.TTS';
    $db_autosys_str='ats11t';
    $wsdl_im='https://goodyeartest.service-now.com/GyCaAutosys.do?WSDL';
    $login='LDSNAST';
    $password='WhatIsJobScheduling4OnTest';
  break;
  case 'production':
    $dir='/opt/CA/WorkloadAutomationAE/autouser.PRD/out/';
    if ($hostname=='akrlx323') $file='event_demon.PRD';
    if ($hostname=='akrlx324') $file='event_demon.shadow.PRD';
    $db_autosys_str='ats11p';
    $wsdl_im='https://goodyear.service-now.com/GyCaAutosys.do?WSDL';
    $login='LDSNASP';
    $password='WhatIsJobScheduling4OnProd';
  break;

}
$fqfn=$dir.$file;

// OPEN DB SOURCE
$db_autosys = open_db($db_autosys_str);
print_log("AutoSys DB opened ($db_autosys_str)");

//OPEN the WSDL SERVICES
$soapclient_sn_im=open_soapclient($wsdl_im,$login,$password,$refresh_wsdl_cache=TRUE);
print_log("ServiceNow WSDL opened ($wsdl_im)");
//soap_functions_and_data($soapclient_sn_im);

$tail = new Tail($fqfn,$status_file);

while (TRUE) {
  for ( $line=$tail->getline(); !($line===FALSE); $line=$tail->getline() ) {
    $pos=$tail->getpos();
    if ($line===FALSE) print("THIS SHOULD NEVER HAPPEN!!!\n");
    // Is this a line of interest?
    $incident_type='';
    if (strpos($line, 'STATUS: FAILURE')!==FALSE) {
      $incident_type='JOB FAILURE';
    } elseif (strpos($line, 'STATUS: TERMINATED')!==FALSE) {
      $incident_type='JOB FAILURE';
    } elseif (strpos($line, 'ALARM: MAXRUNALARM')!==FALSE) {
      $incident_type='MAXRUNALARM';
    } elseif (strpos($line, 'ALARM: RESOURCE')!==FALSE) {
      $incident_type='RESOURCE';
    } elseif (strpos($line, 'ALARM: CHASE')!==FALSE) {
      $incident_type='CHASE';
    } elseif (strpos($line, 'ALARM: MAX_RETRYS')!==FALSE) {
      $incident_type='MAX_RETRY';
    }
    if ($debug_loglines) {
      $line=str_replace("\n"," (pos:$pos)",$line);
      println($line);
      flush();
    }
    if (!empty($incident_type)) {
      $loginfo=get_loginfo($line);
      create_incident($db_autosys,$soapclient_sn_im,$loginfo['jobname'],$incident_type,$loginfo['datetime'],$hostname,$login);
    }
  }
  usleep($sleeptime);
  $script_run_time=microtime(TRUE)-$script_start_time;
  $time_seconds=(integer)date('s');
  $time_hh_mm=date('H:i');
  if ($debug_detail) {
    print("script run time=$script_run_time\n");
    print("time_seconds=$time_seconds\n");
  }
    // Let's exit now, and let CRONTAB start us again
  // EXCEPT at 23:59 because we don't want to miss any events from log changeover
  if ($time_seconds>=55 and $time_seconds<59 and $time_hh_mm!='23:59') {
    // CLEANUP and EXIT NICELY
    if ($debug) print_log('Script exit: '.basename(__FILE__).', run time: '.number_format($script_run_time,1).'s');
    flush();
    close_script_file_lock($lock_handle);
    exit(0);
  }
}

function get_loginfo ($line) {
  $debug=TRUE;
  $words = preg_split('/\s+/', $line);
  if (empty($words[8])) {
    $loginfo['jobname']='';
  } else {
    $loginfo['jobname']=$words[8];
  }
  $log_datetime_str=$words[0].' '.$words[1];
  $log_datetime_obj=DateTime::createFromFormat('!\[m/d/Y H:i:s\]', $log_datetime_str);
  if ($log_datetime_obj===FALSE) {
    println("log_datetime_obj NOT created");
    $loginfo['datetime']=$log_datetime_str;
  } else {
    $loginfo['datetime']=$log_datetime_obj->format('Y-m-d H:i:s');
  }
  return($loginfo);
}

function create_incident ($db_autosys,$soapclient,$jobname,$incident_type,$log_datetime,$autosys_server,$caller_id) {
  $debug=TRUE;
  if ($debug) print_log('begin function '.__FUNCTION__);
  $sql="
SELECT 
  job.job_name,
  enum.str_value as job_type,
  job.description AS job_description,
  job.mach_name AS autosys_agent,
  jobsd.description AS sd_description,
  jobsd.attribute,
  jobsd.priority,
  job.n_retrys,
  job.service_desk
FROM AEDBADMIN.ujo_job job
LEFT JOIN AEDBADMIN.ujo_meta_enumerations enum
  ON (
    enum.enum_name='jobtype' AND
    enum.enumeration=job.job_type AND
    LENGTH(enum.str_value)>1
     )
LEFT JOIN AEDBADMIN.ujo_service_desk jobsd
  ON (
    job.joid = jobsd.joid AND 
    job.job_ver=jobsd.job_ver AND 
    job.over_num=jobsd.over_num
     )
WHERE
  job.is_active=1 AND
  job.is_currver=1 AND
  job.job_name='$jobname'
";
  $row=getrowfromdb($db_autosys,$sql);
  if($debug) print_log("AutoSys DB data=".print_r($row,TRUE));

  // DECIDE IF WE ARE SENDING A TICKET
  if ($row['job_type']=='BOX') {
    if ($debug) println("WONT create incident because job_type='BOX'");
  } elseif ( ($incident_type=='JOB FAILURE') and ($row['n_retrys']>0) ) { 
    if ($debug) println("WONT create incident because incident_type='JOB FAILURE' and n_retrys=".$row['n_retrys']);
  } elseif ( ($row['job_type']=='FW') and ($row['service_desk']==0) ) {
    if ($debug) println("WONT create incident because incident_type='FW' and service_desk=".$row['service_desk']);
  } else {
    if ($row['priority']==2) {
      $incident_info['impact']=2;
      $incident_info['urgency']=2;
    } else {
      $incident_info['impact']=3;
      $incident_info['urgency']=3;
    }

    $pos_group_eq=stripos($row['attribute'],'group="');
    if ($pos_group_eq===FALSE) {
      if ($debug) println("'group=\"' NOT found in attribute field so defaulting to 'GLOBAL_SNO_L1'");
      $incident_info['group']='GLOBAL_SNO_L1';
    } else {
      $pos_quote_1=$pos_group_eq+7;
      $pos_quote_2=strpos($row['attribute'],'"',$pos_group_eq+8);
      if ($pos_quote_2===FALSE) {
        if ($debug) println("second '\"' NOT found for 'group=\"' in attribute field so defaulting to 'GLOBAL_SNO_L1'");
        $incident_info['group']='GLOBAL_SNO_L1';
      } else {
        $incident_info['group']=substr($row['attribute'],$pos_quote_1, $pos_quote_2-$pos_quote_1);
      }
    }

    if ( (stripos($row['attribute'],'NO_ACTION')===FALSE) or ($incident_info['group']=='GLOBAL_SNO_L1') ) {
      $incident_info['state']=SN_INCIDENT_STATE_NEW;
    } else {
      $incident_info['state']=SN_INCIDENT_STATE_CLOSED;
    }

    $incident_info['jobname']=$jobname;
    $incident_info['incident_type']=$incident_type;
    $incident_info['autosys_datetime']=$log_datetime;
    $incident_info['job_description']=$row['job_description'];
    $incident_info['sd_description']=$row['sd_description'];
    $incident_info['attribute']=$row['attribute'];
    $incident_info['autosys_server']=$autosys_server;
    $incident_info['correlation_id']=$log_datetime.'|'.$jobname;
    $incident_info['caller_id']=$caller_id;
    if ($debug) println("WILL create incident with info=".print_r($incident_info,TRUE));   
    $array_request=format_create_incident($incident_info);
    $xml_create_start = microtime(TRUE);
    try {
      $response=$soapclient->insert($array_request);
      $web_service_call_worked=TRUE;
    } 
    catch (SoapFault $e) { 
      $web_service_call_worked=FALSE;
      println("SOAP Fault");
      //var_dump($e);
      println("Specific SoapFault is '".$e->getMessage()."' in file '".$e->getFile()."' on line ".$e->getLine().", faultcode='$e->faultcode', faultstring='$e->faultstring'"); 
    }
    catch (Exception $e) {
      $web_service_call_worked=FALSE;
      println("SOAP Exception other than SOAP Fault");
      println("Specific Exception is '".$e->getMessage()."' in file '".$e->getFile()."' on line ".$e->getLine().", faultcode='$e->faultcode', faultstring='$e->faultstring'"); 
    }
    $xml_create_response = (microtime(true)-$xml_create_start);
    println('xml_response_time: '.number_format($xml_create_response,1).'s to CreateIncident '.$incident_info['correlation_id']);
    xml_request_response($soapclient);

    if ($web_service_call_worked) {
      var_dump($response);
    }
  }
  if ($debug) print_log('end function '.__FUNCTION__);
}

function print_log($line) {
  println(date('[Y-m-d H:i:s] ').$line);
}

function format_create_incident($incident_info) {
// Build the Nested Associative Array corresponding to the Nested XML Request
// SET UP THE IncidentDescription
$BriefDescription   ="AutoSys '$incident_info[incident_type]' on $incident_info[jobname]";
$IncidentDescription="Automated AutoSys Incident: \n". 
                     " ".$BriefDescription." \n".
		     "Job Description: \n".
		     " $incident_info[job_description] \n".
		     "Service Desk Description: \n".
		     " $incident_info[sd_description] \n".
		     "Service Desk Additional Information: \n".
		     " $incident_info[attribute] \n".
		     "AutoSys DateTime: $incident_info[autosys_datetime] \n";

// Build the Nested Associative Array corresponding to the Nested XML Request
$array_request=array(
  'assignment_group'=>$incident_info['group'],
  'short_description'=>$BriefDescription,
  'description'=>$IncidentDescription,
  'impact'=>$incident_info['impact'],
  'urgency'=>$incident_info['urgency'],
  'category'=>'applications',
  'subcategory'=>'error',
  'cmdb_ci'=>'Autosys - Job Scheduling',
  'business_service'=>'',
  'correlation_id'=>$incident_info['correlation_id'],
  'correlation_display'=>'gy_ca_autosys',
  'state'=>$incident_info['state'],
  'caller_id'=>$incident_info['caller_id'],
  'u_preferred_contact_method_caller'=>'email',
  'u_impacted_user'=>$incident_info['caller_id'],
  'u_preferred_contact_method_impacted_user'=>'email',
  'contact_type'=>'email',
);
return($array_request);
}

